import React, {useCallback, useContext, useState} from 'react';
import {GRingContext} from "../../utils/context";
import {
    LngLat,
    MapEventUpdateHandler,
    SearchResponse,
    YMap as YMapType,
    YMapLocationRequest
} from "@yandex/ymaps3-types";
import {
    YMap,
    YMapControls, YMapDefaultFeaturesLayer,
    YMapDefaultSchemeLayer,
    YMapListener,
    YMapMarker,
    YMapSearchControl
} from "../../utils/ymaps";
import '@yandex/ymaps3-default-ui-theme/dist/esm/index.css';
import {CustomSuggest, SuggestCallback} from "@yandex/ymaps3-default-ui-theme";

function CustomMap() {
    const {setAppMode, places} = useContext(GRingContext)

    const [map, setMap] = useState<YMapType | null>(null);

    const LOCATION: YMapLocationRequest = {
        center: [82.8665, 55.0964], // starting position [lng, lat]
        zoom: 13 // starting zoom
    };
    const [location, setLocation] = useState(LOCATION);

    const searchResultHandler = useCallback((searchResult: SearchResponse) => {
        updateMapLocation(searchResult);
    }, []);

    function isSingle(subtitle: string | undefined) {
        return subtitle === undefined || !(subtitle.split(' ').length === 2 && ['организаций', 'organizations'].includes(subtitle.split(' ')[1]));
    }

    const refineSuggest: SuggestCallback = useCallback(async (toSearch: CustomSuggest) => {
        const result = await ymaps3.suggest({text: toSearch.text})
        return result.filter(r => isSingle(r.subtitle?.text))
    }, []);

    const updateMapLocation = useCallback((searchResult: SearchResponse) => {
        const newCoords: LngLat = [searchResult[0].geometry?.coordinates[0] ? searchResult[0].geometry?.coordinates[0] : location.center[0],
            searchResult[0].geometry?.coordinates[1] ? searchResult[0].geometry?.coordinates[1] : location.center[1]]
        setLocation({center: newCoords, zoom: map?.zoom ? map.zoom : location.zoom});
    }, []);

    const stateChanged: MapEventUpdateHandler = useCallback((mapState) => {
        console.log('stateChanged', mapState.location.center)
    }, [])

    return (
        <YMap
            location={location}
            ref={x => setMap(x)}

        >
            <YMapDefaultSchemeLayer/>
            <YMapControls position="top left">
                <YMapSearchControl suggest={refineSuggest} searchResult={searchResultHandler}/>
            </YMapControls>
            <YMapListener onUpdate={stateChanged}/>
            <YMapDefaultFeaturesLayer/>

            {places.map(place =>
                <YMapMarker
                    key={place.id}
                    coordinates={[parseFloat(place.latlon.split(',')[1]), parseFloat(place.latlon.split(',')[0])]}
                    onClick={() => setAppMode(place.id)}
                >
                    <svg width="30" height="30">
                        <circle cx="15" cy="15" r="10" stroke="green" stroke-width="1" fill="yellow" />

                        <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="12" fill="black">{place.rating}</text>
                    </svg>
                </YMapMarker>
            )}
        </YMap>
    );
};

export default CustomMap;